{"version":3,"file":"js/348.bundle.js","mappings":"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","sources":["webpack:///node_modules/helper-vue-components/src/DynamicTemplate/Component.vue","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue?76e0","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue","webpack:///./node_modules/helper-vue-components/src/DynamicTemplate/Component.vue?a4e2"],"sourcesContent":["<template lang=\"pug\">\r\n    include Template.pug\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: {\r\n            params: {\r\n                type: Array|Object\r\n            },\r\n            template_type_name: {\r\n                type: String\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                configChanged: false,\r\n                paramChanged: false,\r\n                compiledTemplate: {}\r\n            }\r\n        },\r\n        mounted() {\r\n            let templateToCompile = {\r\n                template_type_name: this.template_type_name,\r\n                params: this.params\r\n            }\r\n            this.compiledTemplate = this.replaceConfigTemplates(templateToCompile)\r\n            this.compiledTemplate = this.HTMLDecodeTemplate(this.compiledTemplate)\r\n            console.log(this.compiledTemplate)\r\n        },\r\n        computed: {\r\n            compiledTemplateText() {\r\n                return JSON.stringify(this.compiledTemplate)\r\n            }\r\n        },\r\n        methods: {\r\n            replaceConfigTemplates(config) {\r\n                let globalParams = config.params\r\n                do {\r\n                    this.configChanged = false\r\n                    config = this.replaceUpperConfigTemplates(config, globalParams)\r\n                }\r\n                while (this.configChanged)\r\n                return config\r\n            },\r\n            replaceUpperConfigTemplates(config, globalParams) {\r\n                if (Array.isArray(config)) {\r\n                    let self = this\r\n                    return config.map((configValue) => {\r\n                        return self.replaceUpperConfigTemplates(configValue, globalParams)\r\n                    })\r\n                }\r\n                else if (config && typeof(config) == 'object') {\r\n                    if ('template_type_name' in config) {\r\n                        return this.replaceTemplate(config, globalParams)\r\n                    }\r\n                    else {\r\n                        return this.replaceObjectTemplateProperties(config, globalParams)\r\n                    }\r\n                }\r\n                else {\r\n                    return config\r\n                }\r\n            },\r\n            replaceObjectTemplateProperties(config, globalParams) {\r\n                for (const [key, value] of Object.entries(config)) {\r\n                    if (value == null) {\r\n                        config[key] = null\r\n                    }\r\n                    else if (Array.isArray(value)) {\r\n                        let self = this\r\n                        config[key] = value.map((configValue) => {\r\n                            return self.replaceUpperConfigTemplates(configValue, globalParams)\r\n                        })\r\n                    }\r\n                    else if (typeof(value) == 'object') {\r\n                        if ('template_type_name' in value) {\r\n                            config[key] = this.replaceTemplate(value, globalParams)\r\n                        }\r\n                        else {\r\n                            config[key] = this.replaceUpperConfigTemplates(value, globalParams)\r\n                        }\r\n                    }\r\n                }\r\n                return config\r\n            },\r\n            replaceTemplate(config, globalParams) {\r\n                let templateConfig = getObjectSubProperty(window.templates, config.template_type_name)\r\n                if ('params' in config) {\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, config.params, '++')\r\n                }\r\n                if (globalParams) {\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, globalParams, '-++')\r\n                    templateConfig = this.replaceTemplateParams(templateConfig, globalParams, '--')\r\n                }\r\n                this.configChanged = true\r\n                return templateConfig\r\n            },\r\n            replaceTemplateParams(templateConfig, params, paramPrefix) {\r\n                do {\r\n                    this.paramChanged = false\r\n                    templateConfig = this.replaceUpperTemplateParams(templateConfig, params, paramPrefix)\r\n                } while (this.paramChanged)\r\n                return templateConfig\r\n            },\r\n            replaceUpperTemplateParams(template, params, paramPrefix) {\r\n                if (template == null) {\r\n                    return null\r\n                }\r\n                else if (Array.isArray(template)) {\r\n                    let arrayTemplate = []\r\n                    let self = this\r\n                    template.forEach((templateValue) => {\r\n                        let replacedTemplateValue = self.getReplacedTemplateValue(templateValue, params, paramPrefix)\r\n                        if (typeof templateValue == 'object' && 'array_data' in templateValue && templateValue.merge_to_parent) {\r\n                            arrayTemplate = arrayTemplate.concat(replacedTemplateValue)\r\n                        }\r\n                        else {\r\n                            arrayTemplate.push(replacedTemplateValue)\r\n                        }\r\n                    })\r\n                    return arrayTemplate\r\n                }\r\n                else if (typeof(template) == 'object') {\r\n                    if ('array_data' in template) {\r\n                        return this.createArrayTemplate(template, params[template.array_data], template.array_data)\r\n                    }\r\n                    else {\r\n                        let replaceTemplate = structuredClone(template)\r\n                        for (const [key, value] of Object.entries(replaceTemplate)) {\r\n                            replaceTemplate[key] = this.replaceUpperTemplateParams(value, params, paramPrefix)\r\n                        }\r\n                        return replaceTemplate\r\n                    }\r\n                }\r\n                else {\r\n                    return this.getTemplateValue(template, params, paramPrefix)\r\n                }\r\n            },\r\n            getReplacedTemplateValue(templateValue, params, paramPrefix) {\r\n                if (typeof templateValue == 'object' && 'array_data' in templateValue && templateValue.direct_paste) {\r\n                    return params[templateValue.array_data]\r\n                }\r\n                else {\r\n                    return this.replaceUpperTemplateParams(templateValue, params, paramPrefix)\r\n                }\r\n            },\r\n            createArrayTemplate(template, arrayParam, arrayParamName) {\r\n                if (arrayParam && Array.isArray(arrayParam)) {\r\n                    let replaceTemplate = structuredClone(template)\r\n                    delete replaceTemplate.array_data\r\n                    delete replaceTemplate.merge_to_parent\r\n                    return arrayParam.map((param) => {\r\n                        let configParam = {}\r\n                        configParam[arrayParamName] = param\r\n                        return this.replaceUpperTemplateParams(replaceTemplate, configParam, '++')\r\n                    })\r\n                }\r\n                else {\r\n                    return []\r\n                }\r\n            },\r\n            getTemplateValue(value, params, paramPrefix) {\r\n                if (typeof value == 'string') {\r\n                    if (value.indexOf(paramPrefix) == 0) {\r\n                        let valueToCheck = value.substring(paramPrefix.length)\r\n                        let replacedValue = getObjectSubProperty(params, valueToCheck, value)\r\n                        if (replacedValue != value) {\r\n                            this.paramChanged = true\r\n                        }\r\n                        return replacedValue\r\n                    }\r\n                    else {\r\n                        return value\r\n                    }\r\n                }\r\n                else {\r\n                    return value\r\n                }\r\n            },\r\n            HTMLDecodeTemplate(template) {\r\n                if (template == null) {\r\n                    return null\r\n                }\r\n                else if (Array.isArray(template)) {\r\n                    let arrayTemplate = []\r\n                    template.forEach((templateValue) => {\r\n                        arrayTemplate.push(this.HTMLDecodeTemplate(templateValue))\r\n                    })\r\n                    return arrayTemplate\r\n                }\r\n                else if (typeof(template) == 'object') {\r\n                    let replaceTemplate = structuredClone(template)\r\n                    for (const [key, value] of Object.entries(replaceTemplate)) {\r\n                        replaceTemplate[key] = this.HTMLDecodeTemplate(value)\r\n                    }\r\n                    return replaceTemplate\r\n                }\r\n                else if (typeof(template) == 'string') {\r\n                    return he.decode(template)\r\n                }\r\n                else {\r\n                    return template\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","import mod from \"-!../../../vue-loader/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../vue-loader/lib/index.js??vue-loader-options!./Component.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Component.vue?vue&type=template&id=6af5d353&lang=pug&\"\nimport script from \"./Component.vue?vue&type=script&lang=js&\"\nexport * from \"./Component.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('dynamic-component',{attrs:{\"component_infos\":_vm.compiledTemplate}})\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"],"names":["props","params","type","Array","Object","template_type_name","String","data","configChanged","paramChanged","compiledTemplate","mounted","templateToCompile","this","replaceConfigTemplates","HTMLDecodeTemplate","console","log","computed","compiledTemplateText","JSON","stringify","methods","config","globalParams","replaceUpperConfigTemplates","isArray","self","map","configValue","replaceTemplate","replaceObjectTemplateProperties","key","value","entries","templateConfig","getObjectSubProperty","window","templates","replaceTemplateParams","paramPrefix","replaceUpperTemplateParams","template","arrayTemplate","forEach","templateValue","replacedTemplateValue","getReplacedTemplateValue","merge_to_parent","concat","push","createArrayTemplate","array_data","structuredClone","getTemplateValue","direct_paste","arrayParam","arrayParamName","param","configParam","indexOf","valueToCheck","substring","length","replacedValue","he","decode","_c","_self","attrs"],"sourceRoot":""}